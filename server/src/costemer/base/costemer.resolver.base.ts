/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCostemerArgs } from "./CreateCostemerArgs";
import { UpdateCostemerArgs } from "./UpdateCostemerArgs";
import { DeleteCostemerArgs } from "./DeleteCostemerArgs";
import { CostemerFindManyArgs } from "./CostemerFindManyArgs";
import { CostemerFindUniqueArgs } from "./CostemerFindUniqueArgs";
import { Costemer } from "./Costemer";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { CostemerService } from "../costemer.service";

@graphql.Resolver(() => Costemer)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CostemerResolverBase {
  constructor(
    protected readonly service: CostemerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Costemer",
    action: "read",
    possession: "any",
  })
  async _costemersMeta(
    @graphql.Args() args: CostemerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Costemer])
  @nestAccessControl.UseRoles({
    resource: "Costemer",
    action: "read",
    possession: "any",
  })
  async costemers(
    @graphql.Args() args: CostemerFindManyArgs
  ): Promise<Costemer[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Costemer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Costemer",
    action: "read",
    possession: "own",
  })
  async costemer(
    @graphql.Args() args: CostemerFindUniqueArgs
  ): Promise<Costemer | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Costemer)
  @nestAccessControl.UseRoles({
    resource: "Costemer",
    action: "create",
    possession: "any",
  })
  async createCostemer(
    @graphql.Args() args: CreateCostemerArgs
  ): Promise<Costemer> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Costemer)
  @nestAccessControl.UseRoles({
    resource: "Costemer",
    action: "update",
    possession: "any",
  })
  async updateCostemer(
    @graphql.Args() args: UpdateCostemerArgs
  ): Promise<Costemer | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Costemer)
  @nestAccessControl.UseRoles({
    resource: "Costemer",
    action: "delete",
    possession: "any",
  })
  async deleteCostemer(
    @graphql.Args() args: DeleteCostemerArgs
  ): Promise<Costemer | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order])
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async orders(
    @graphql.Parent() parent: Costemer,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
